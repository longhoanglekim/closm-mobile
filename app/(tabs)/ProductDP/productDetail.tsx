import React, { useEffect, useState } from "react";
import {
  View,
  Text,
  Image,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
} from "react-native";
import { useRoute, useNavigation } from "@react-navigation/native";
import styles from "@/constants/VariantDetails";
import ProductDetailModal from "./ProductDetailModal";
import { getVariantListByName } from "@/api/products/products";

const ProductDetail = () => {
  const route = useRoute();
  const navigation = useNavigation();
  const { id, tag } = route.params as { id: number; tag: string };

  const [loading, setLoading] = useState(true);
  const [quantity, setQuantity] = useState(1);
  const [selectedSize, setSelectedSize] = useState<string | null>(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [availableSizes, setAvailableSizes] = useState<string[]>([]);
  const [tagVariants, setTagVariants] = useState<any>(null);

  useEffect(() => {
    const fetchVariantDetails = async () => {
      try {
        setLoading(true);
        const tagData = await getVariantListByName(tag);
        setTagVariants(tagData);
        // N·∫øu API tr·∫£ v·ªÅ m·∫£ng variants v√† m·ªói ph·∫ßn t·ª≠ c√≥ tr∆∞·ªùng size,
        // b·∫°n c√≥ th·ªÉ import availableSizes t·ª´ ƒë√≥, v√≠ d·ª•:
        // const sizes = tagData.variantList.map((v: any) => v.size);
        // setAvailableSizes(sizes);
      } catch (err) {
        console.error("Error fetching variant details:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchVariantDetails();
  }, [tag]);

  const handleAddToCart = (cartItem: any) => {
    console.log("Added to cart:", cartItem);
    setModalVisible(false);
  };

  const handleBuyNow = () => {
    console.log("Buy now:", {
      id: tagVariants?.id,
      name: tagVariants?.name,
      quantity,
      size: selectedSize,
      price: tagVariants?.variantList[0]?.price,
    });
  };

  const handleBack = () => {
    navigation.goBack();
  };

  const formatPrice = (price?: number) => {
    return price != null ? price.toLocaleString() : "N/A";
  };

  if (loading || !tagVariants) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#FF5500" />
      </View>
    );
  }

  // Gi·∫£ s·ª≠ API tr·∫£ v·ªÅ: tagVariants = { id, name, variantList: [ { id, name, price, imageUrl, size, color, quantity }, ... ] }
  const firstVariant = tagVariants.variantList[0];

  return (
    <View style={styles.container}>
      <ScrollView>
        {/* ======= HEADER ======= */}
        <View style={styles.header}>
          <TouchableOpacity onPress={handleBack} activeOpacity={0.7}>
            <Text style={styles.backIcon}>‚Üê</Text>
          </TouchableOpacity>
          <View style={styles.headerSpacer} />
          <TouchableOpacity activeOpacity={0.7}>
            <Text style={styles.headerIcon}>üõí</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.headerMore} activeOpacity={0.7}>
            <Text style={styles.headerIcon}>‚ãÆ</Text>
          </TouchableOpacity>
        </View>

        {/* ======= ·∫¢NH S·∫¢N PH·∫®M ======= */}
        <View style={styles.imageWrapper}>
          <Image
            source={{ uri: firstVariant.imageUrl }}
            style={styles.productImage}
            resizeMode="cover"
          />
          <View style={styles.imageNavigation}>
            <Text style={styles.imageNavText}>1/1</Text>
          </View>
        </View>

        {/* ======= PH·∫¶N GI√Å & KHUY·∫æN M√ÉI ======= */}
        <View style={styles.priceSection}>
          <View style={styles.priceRow}>
            <Text style={styles.price}>
              ‚Ç´{formatPrice(firstVariant.price)}
            </Text>
            <Text style={styles.originalPrice}>
              ‚Ç´{formatPrice(firstVariant.price * 1.5)}
            </Text>
          </View>
          <View style={styles.installment}>
            <Text style={styles.installmentText}>
              Ch·ªâ t·ª´ ‚Ç´{formatPrice(firstVariant.price)} x 1 k·ª≥ v·ªõi Closm Pay
            </Text>
            <Text style={styles.installmentText}>‚ñ∂</Text>
          </View>
        </View>

        <View style={styles.promoContainer}>
          <View style={styles.promoBox}>
            <Text style={styles.promoText}>Gi·∫£m 10% khi mua t·ª´ 2 s·∫£n ph·∫©m</Text>
          </View>
          <View style={styles.promoBox}>
            <Text style={styles.promoText}>Free ship to√†n qu·ªëc</Text>
          </View>
        </View>

        {/* ======= TI√äU ƒê·ªÄ S·∫¢N PH·∫®M & Y√äU TH√çCH ======= */}
        <View style={styles.titleSection}>
          <Text style={styles.titleText}>{tagVariants.name}</Text>
          <TouchableOpacity activeOpacity={0.7}>
            <Text style={styles.heartIcon}>‚ô°</Text>
          </TouchableOpacity>
        </View>

        {/* ======= TH√îNG TIN V·∫¨N CHUY·ªÇN ======= */}
        <View style={styles.shippingSection}>
          <View style={styles.shippingCard}>
            <Text style={styles.shippingIcon}>üöö</Text>
            <Text style={styles.shippingText}>
              Nh·∫≠n h√†ng nhanh ch√≥ng, ti·ªán l·ª£i
            </Text>
            <Text style={styles.shippingArrow}>‚ñ∂</Text>
          </View>
          <View style={styles.shippingCard}>
            <Text style={styles.shippingIcon}>üõ°Ô∏è</Text>
            <Text style={styles.shippingText}>
              Tr·∫£ h√†ng mi·ªÖn ph√≠ 10 ng√†y | B·∫£o hi·ªÉm Th·ªùi trang
            </Text>
            <Text style={styles.shippingArrow}>‚ñ∂</Text>
          </View>
        </View>

        {/* ======= CH·ªåN SIZE & COLOR & STOCK ======= */}
        <View style={styles.sizeSection}>
          <View style={styles.sizeHeader}>
            <Text style={styles.sizeHeaderText}>
              Ch·ªçn lo·∫°i h√†ng (Size: {firstVariant.size})
            </Text>
            <Text style={styles.sizeArrow}>‚ñ∂</Text>
          </View>
          <View style={styles.sizeList}>
            {availableSizes.length > 0
              ? availableSizes.map((size) => (
                  <TouchableOpacity
                    key={size}
                    activeOpacity={0.7}
                    style={[
                      styles.sizeBox,
                      selectedSize === size && styles.sizeBoxSelected,
                    ]}
                    onPress={() => setSelectedSize(size)}
                  >
                    <Text
                      style={[
                        styles.sizeText,
                        selectedSize === size && styles.sizeTextSelected,
                      ]}
                    >
                      {size}
                    </Text>
                  </TouchableOpacity>
                ))
              : null}

            {/* D√≤ng hi·ªÉn th·ªã color + stock */}
            <View style={styles.colorStockRow}>
              <Text style={styles.colorText}>
                Color: {firstVariant.color || "N/A"}
              </Text>
              <Text style={styles.stockText}>| S·ªë l∆∞·ª£ng: {firstVariant.quantity || 0}</Text>
            </View>
          </View>
        </View>

        {/* ======= ƒê√ÅNH GI√Å S·∫¢N PH·∫®M ======= */}
        <View style={styles.ratingSection}>
          <View style={styles.ratingHeader}>
            <Text style={styles.ratingIcon}>‚≠ê</Text>
            <Text style={styles.ratingText}>ƒê√°nh Gi√° S·∫£n Ph·∫©m</Text>
            <Text style={styles.ratingAll}>T·∫•t c·∫£ ‚ñ∂</Text>
          </View>
        </View>
      </ScrollView>

      {/* ======= BOTTOM BAR ======= */}
      <View style={styles.bottomBar}>
        <TouchableOpacity style={styles.bottomBtn} activeOpacity={0.7}>
          <Text style={{ fontSize: 20, color: "#333333", marginRight: 6 }}>üí¨</Text>
          <Text style={styles.bottomBtnText}>Chat ngay</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.bottomBtn}
          activeOpacity={0.7}
          onPress={() => setModalVisible(true)}
        >
          <Text style={{ fontSize: 20, color: "#333333", marginRight: 6 }}>üõí</Text>
          <Text style={styles.bottomBtnText}>Th√™m gi·ªè h√†ng</Text>
        </TouchableOpacity>

        {/* <TouchableOpacity
          style={styles.buyBtn}
          activeOpacity={0.7}
          onPress={handleBuyNow}
        >
          <Text style={styles.buyBtnText}>
            Mua v·ªõi voucher ‚Ç´{formatPrice(firstVariant.price)}
          </Text>
        </TouchableOpacity> */}
      </View>

      {/* ======= MODAL CH·ªåN SIZE/TH√äM GI·ªé H√ÄNG ======= */}
      <ProductDetailModal
        visible={modalVisible}
        onClose={() => setModalVisible(false)}
        tagVariants={tagVariants}
        onAddToCart={handleAddToCart}
        availableSizes={availableSizes}
      />
    </View>
  );
};

export default ProductDetail;
